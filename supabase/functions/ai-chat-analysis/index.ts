// DeepSeek API configuration
const DEEPSEEK_API_KEY = 'sk-5bf05a3087234e848c1588f1ce75b49e';
const DEEPSEEK_BASE_URL = 'https://api.deepseek.com/v1';
const DEEPSEEK_MODEL = 'deepseek-reasoner'; // Using thinking mode for better analysis

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface ChatMessage {
  content: string;
  senderId: string;
  receiverId: string;
  timestamp: string;
  senderRole: string;
  receiverRole: string;
}

interface AnalysisRequest {
  messages: ChatMessage[];
  userQuestion?: string;
  threadId: string;
  user1Role: string;
  user2Role: string;
  analysisType: 'conversation_analysis' | 'user_question';
}

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { messages, userQuestion, threadId, user1Role, user2Role, analysisType }: AnalysisRequest = await req.json()

    let response: string;
    
    if (analysisType === 'user_question' && userQuestion) {
      response = await handleUserQuestion(userQuestion, messages, user1Role, user2Role);
    } else if (analysisType === 'conversation_analysis') {
      response = await analyzeConversation(messages, user1Role, user2Role);
    } else {
      throw new Error('Invalid analysis type or missing required parameters');
    }

    return new Response(
      JSON.stringify({ 
        response,
        success: true,
        threadId 
      }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    )
  } catch (error) {
    console.error('AI Analysis Error:', error)
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Analysis failed',
        success: false
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    )
  }
})

async function handleUserQuestion(
  question: string, 
  messages: ChatMessage[], 
  user1Role: string, 
  user2Role: string
): Promise<string> {
  try {
    // Build dynamic prompt with real conversation history
    const conversationHistory = messages.slice(-15).map(msg => 
      `${msg.senderRole} (${msg.senderId.substring(0, 8)}): ${msg.content}`
    ).join('\n');

    const prompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç: –≠—Ç–æ –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É ${user1Role} –∏ ${user2Role} –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Influo.

–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
${conversationHistory}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${question}

–ó–∞–¥–∞—á–∞: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≠–¢–û–¢ –ö–û–ù–ö–†–ï–¢–ù–´–ô –¥–∏–∞–ª–æ–≥ –∏ –¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
–£—á–∏—Ç—ã–≤–∞–π:
- –†–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
- –†–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (${user1Role} –∏ ${user2Role})
- –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è

–û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –∏–∑–±–µ–≥–∞—è –æ–±—â–∏—Ö —Å–æ–≤–µ—Ç–æ–≤.`;

    const response = await fetch(`${DEEPSEEK_BASE_URL}/chat/completions`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: DEEPSEEK_MODEL,
        messages: [
          {
            role: 'system',
            content: '–¢—ã - AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –∏ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏ –¥–∞–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 500,
        temperature: 0.7,
        top_p: 0.9
      })
    });

    if (!response.ok) {
      throw new Error(`DeepSeek API error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    return data.choices[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI';
  } catch (error) {
    console.error('DeepSeek user question failed:', error);
    throw error;
  }
}

async function analyzeConversation(
  messages: ChatMessage[], 
  user1Role: string, 
  user2Role: string
): Promise<string> {
  try {
    // Only analyze if we have enough messages
    if (messages.length < 2) {
      return '–î–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—Å—è. –ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.';
    }

    // Build conversation history for analysis
    const conversationHistory = messages.slice(-15).map(msg => 
      `${msg.senderRole} (${msg.senderId.substring(0, 8)}): ${msg.content}`
    ).join('\n');

    const prompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç: –≠—Ç–æ –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É ${user1Role} –∏ ${user2Role} –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Influo.

–†–ï–ê–õ–¨–ù–ê–Ø –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
${conversationHistory}

–ó–∞–¥–∞—á–∞: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≠–¢–û–¢ –ö–û–ù–ö–†–ï–¢–ù–´–ô –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:

1. üéØ –°–¢–ê–¢–£–° –ü–ï–†–ï–ì–û–í–û–†–û–í: (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ/–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)
2. üìä –ê–ù–ê–õ–ò–ó –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò: (–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è/–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è)
3. üí° –ö–û–ù–ö–†–ï–¢–ù–´–ï –ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø: –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
4. üöÄ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: –¥–ª—è –≠–¢–ò–• –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
5. ‚ö†Ô∏è –†–ò–°–ö–ò: —á—Ç–æ –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ –Ω–µ —Ç–∞–∫ –≤ –≠–¢–û–ú –¥–∏–∞–ª–æ–≥–µ

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–º–µ–Ω–Ω–æ –≠–¢–£ –ø–µ—Ä–µ–ø–∏—Å–∫—É, –∞ –Ω–µ –¥–∞–≤–∞–π –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã.`;

    const response = await fetch(`${DEEPSEEK_BASE_URL}/chat/completions`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: DEEPSEEK_MODEL,
        messages: [
          {
            role: 'system',
            content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–µ–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ö–û–ù–ö–†–ï–¢–ù–´–ï –¥–∏–∞–ª–æ–≥–∏ –∏ –¥–∞–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –∞ –Ω–µ –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 600,
        temperature: 0.6,
        top_p: 0.9
      })
    });

    if (!response.ok) {
      throw new Error(`DeepSeek API error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    return data.choices[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥';
  } catch (error) {
    console.error('DeepSeek conversation analysis failed:', error);
    throw error;
  }
}